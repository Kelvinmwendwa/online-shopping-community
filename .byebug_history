c
current_user.searches
current_user.seaches
logged_in?
c
current_user
logged_in?
c
articles
a=articles[0]
b.to_s.scan(/\d+/).first.to_i
b.to_s.scan(/\d+/)
b.to_s.scan(/(\d+)/)
b.to_s.scan(/([\d]+)/)
b.to_s.scan(/([\d])/)
b.to_s.scan(/(\d)/)
b.to_s.scan(/(/d)/)
ap b.to_s
puts b
ap b
b=a.xpath(".//div[@class='rev']/text()")
ap b
b=a.xpath(".//div[@class='rev']")
ap b
b=a.xpath(".//div[@class='rev']/text()")
a.xpath(".//div[@class='rev']/text()")
a.xpath(".//div[@class='in']")
a.xpath(".//div[@class='in']/text()")
ap a.xpath(".//div[@class='in']/text()")
ap a.xpath(".//div[@class='in']")
a.xpath(".//div[@class='in']")
ap a
a=articles[0]
ap articles[0]
c
JSON.parse(c)
c=JSON.parse(b)
JSON.parse(b)
b=auth.split(" ").last
auth.split(" ").last
auth
a
a=a.split(" ").last
auth=request.headers["Authorization"]
c
cc
c
auth=request.headers["Authorization"]
a=a.split(" ").last
a
a=a.last
a=a.split(" ")
JSON.parse(a)
JSON.generate("memme")
JSON.generate(a)
a
json.generate("\skfkmdf\"
f="sddsfssfd\"
d
d="\sdfsfssdf\"
JWT.decode(t,"bReachers&ecret",true,algorithm:'HS256')
decode_token(t)
t=encode_token({user_id:3})
encode_token({user_id:3})
encode({user_id:3})
a=request.headers["Authorization"]
a=a.split(" ").last
a=request.headers["Authorization"]
current_user
request.headers["Authorization"]
c
decode_token[0]["user_id"]
decode_token[0][:user_id]
decode_token[0]
decode_token
user_id
c
user
c
request.headers["Authorization"]
c
JWT.decode(a,"bReachers&ecret",true,algorithm:"HS256")
a=request.headers["Authorization"].split(" ").last
request.headers["Authorization"]
request.headers
request
continue
articles
c
ap ebay
cards
c
ap articles
c
ap @pages[:ebay]
ap @pages[:amazon]
ap @pages[:jumia]
c
amazon
jumia
ebay
c
cards.length
c
continue
raw
ap cards
c
            }
                search_id: @search_id
                shop:"ebay",
                coupon_discount: card.xpath(".//span[@class='NEGATIVE BOLD']/text()").to_s,
                shipping:card.xpath(".//span[@class='s-item__shipping s-item__logisticsCost']/text()").to_s,
                return_policy:card.xpath(".//span[@class='s-item__free-returns s-item__freeReturnsNoFee']/text()").to_s,
                rated_products:"",
                ratings:"",
                discount: card.xpath(".//span[@class='BOLD']/text()").to_s,
                price_before_discount: card.xpath(".//span[@class='STRIKETHROUGH']/text()").to_s,
                price:card.xpath(".//span[@class='s-item__price']/text()").to_s,
                name:card.xpath(".//span[@role='heading']/text()").to_s,
                image_url:card.xpath(".//img[@class='s-item__image-img']").attr("src").to_s,
            {
cards.map do |card|
cards.length
ap cards[1].xpath(".//img[@class='s-item__image-img']")
cards
raw
c
cards
c
ap cards
